name: Windows (LV2, VST3)

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
    tags:
      - '*'

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
 
      - name: Building 
        run: |
          pacman -S --noconfirm git mingw-w64-ucrt-x86_64-toolchain mingw-w64-ucrt-x86_64-cmake mingw-w64-ucrt-x86_64-libsndfile mingw-w64-ucrt-x86_64-rapidjson mingw-w64-ucrt-x86_64-cairo mingw-w64-ucrt-x86_64-lv2 make
          rm -fr /ucrt64/lib/*thread*.dll.a
          git clone --recursive https://github.com/Geonkick-Synthesizer/vst3sdk.git
          pwd
          ls -l
          mkdir -p build
          cd build
          cmake -G "Unix Makefiles" -DVST3_SDK_PATH=/d/a/geonkick/geonkick/vst3sdk ../
          sed -i 's/std:://g' ../vst3sdk/public.sdk/source/vst/utility/alignedalloc.h
          make VERBOSE=1
          cd /d/a/geonkick/geonkick/build
          mkdir -p Geonkick.vst3/Contents/x86_64-win
          cp -fr src/plugin/vst/Geonkick.dll  Geonkick.vst3/Contents/x86_64-win/Geonkick.vst3
          mkdir geonkick.lv2
          cp -fr src/plugin/lv2/*.dll geonkick.lv2
          cp -fr ../src/plugin/lv2/geonkick_win.lv2/* geonkick.lv2
          mkdir plugins
          cp -fr geonkick.lv2 plugins
          cp -fr Geonkick.vst3 plugins
          cp ../LICENSE plugins
          mkdir plugins/presets
          cp -fr presets/AVL-Drumkit plugins/presets
          cp -fr presets/DigitalSamba plugins/presets
          cp -fr presets/DSoS plugins/presets
          cp -fr presets/GeonkickBells plugins/presets
          cp -fr presets/TimeKit plugins/presets
          cp -fr presets/UnfaTutorial plugins/presets

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: geonkick-build
          path: D:\a\geonkick\geonkick\build\plugins
          
  create-ssi:
    needs: build
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh {0}
  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
  
      - name: Determine Version Info
        id: version
        run: |
            if ($env:GITHUB_REF -like 'refs/tags/*') {
              $tag = $env:GITHUB_REF -replace 'refs/tags/', ''
              echo "VERSION_INFO=tag-$tag" >> $GITHUB_ENV
            } else {
              echo "VERSION_INFO=commit-" + $env:GITHUB_SHA.Substring(0, 7) >> $GITHUB_ENV
            }
            echo "VERSION_INFO = $env:VERSION_INFO"
        shell: pwsh
  
      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: geonkick-build
          path: D:\a\geonkick\build\plugins
  
      - name: Download and Install Inno Setup
        run: |
           Invoke-WebRequest -Uri 'https://jrsoftware.org/download.php/is.exe' -OutFile 'C:\is.exe'
           Start-Process -Wait -FilePath 'C:\is.exe' -ArgumentList '/VERYSILENT', '/NORESTART'
           Remove-Item -Path 'C:\is.exe'
  
      - name: Compile Inno Setup Script
        run: |
           & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "D:\a\geonkick\geonkick\.github\workflows\GeonkickInstall.iss"
           & "cp" "D:\a\geonkick\geonkick\.github\workflows\Output\mysetup.exe" "D:\a\geonkick\build\plugins\GeonkickInstaller-v3.4.0-x86_64_unreleased.exe"
  
      - name: Upload Installer
        uses: actions/upload-artifact@v2
        with:
          name: geonkick-installer
          path: D:\a\geonkick\build\plugins\GeonkickInstaller-v3.4.0-x86_64_unreleased.exe
